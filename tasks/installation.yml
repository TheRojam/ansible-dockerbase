---
- name: Ensure old versions of Docker are not installed
  ansible.builtin.package:
    name:
      - docker
      - docker-engine
    state: absent

- name: Ensure dependencies for docker packages are installed
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - gnupg2
    state: present

- name: Install Docker
  ansible.builtin.package:
    name: "{{ docker_package }}"
    state: "{{ docker_package_state }}"
  notify: restart docker

- name: Check current docker-compose version
  ansible.builtin.command: docker-compose --version
  register: docker_compose_current_version
  changed_when: false
  failed_when: false

- name: Delete existing docker-compose version if it's different
  ansible.builtin.file:
    path: "{{ docker_compose_path }}"
    state: absent
  when: >
    docker_compose_current_version.stdout is defined
    and docker_compose_version not in docker_compose_current_version.stdout

- name: Install Docker Compose (if configured)
  ansible.builtin.get_url:
    url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
    dest: "{{ docker_compose_path }}"
    mode: 0755
# environment:
#   http_proxy:  "{{ http_proxy }}"
#   https_proxy: "{{ http_proxy }}"

- name: ensure packages 4 nginx are installed on debian system
  ansible.builtin.apt:
    pkg:
      - nginx-light
      - python-pip
    state: present
  when: ansible_distribution == 'Debian'
      
      
- name: ensure packages 4 nginx and python-pip are installed on ubuntu system
  ansible.builtin.apt:
    pkg:
      - nginx-light
      - python3-pip
      - python3-setuptools
    state: present
  when: ansible_distribution == 'Ubuntu'

- name: ensure python docker tools are installed
  ansible.builtin.pip:
    name:
      - docker
      - docker-compose
# environment:
#   http_proxy:  "{{ http_proxy }}"
#   https_proxy: "{{ http_proxy }}"

# vim: tabstop=2 shiftwidth=2
